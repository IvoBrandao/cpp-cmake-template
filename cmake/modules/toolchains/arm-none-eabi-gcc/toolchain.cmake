
if (NOT DEFINED TARGET_TOOLCHAIN)
    message(FATAL_ERROR "PROJECT_TOOLCHAIN_PATH is not defined")
endif()

if (NOT DEFINED PROJECT_ARCH_CPU)
    message(FATAL_ERROR "PROJECT_ARCH_CPU not defined")
endif()

if (NOT DEFINED PROJECT_ARCH_PROJECT_MODE)
    message(FATAL_ERROR "PROJECT_ARCH_PROJECT_MODE not defined")
endif()

if (NOT DEFINED PROJECT_ARCH_FLOAT_ABI)
    message(FATAL_ERROR "PROJECT_ARCH_FLOAT_ABI not defined")
endif()

if (NOT DEFINED PROJECT_ARCH_FPU)
    message(FATAL_ERROR "PROJECT_ARCH_FPU not defined")
endif()

if (NOT DEFINED PROJECT_LINKER_SCRIPT_PATH)
    message(FATAL_ERROR "PROJECT_LINKER_SCRIPT_PATH not defined")
endif()


# The CMAKE_SYSTEM_NAME is the CMake-identifier of the target platform to build for.
SET( CMAKE_SYSTEM_NAME Generic )

# The CMAKE_SYSTEM_PROCESSOR is the CMake-identifier of the target architecture to build for.
SET( CMAKE_SYSTEM_PROCESSOR ${PROJECT_ARCH_CPU} )

# The CMAKE_<LANG>_COMPILER variables may be set to full paths, or to names
# of compilers to search for in standard locations. For toolchains that do 
# not support linking binaries without custom flags or scripts one may set 
# the CMAKE_TRY_COMPILE_TARGET_TYPE variable to STATIC_LIBRARY to tell CMake 
# not to try to link executables during its checks.
SET( CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY )

# The CMAKE_SYSROOT is optional, and may be specified if a sysroot is available.
# SET( CMAKE_SYSROOT )
SET( CMAKE_CROSSCOMPILING "TRUE")


INCLUDE(CMakeForceCompiler)

# specify the cross compiler

# if arm-none-eabi-gcc then use the following
if (PROJECT_TOOLCHAIN_PATH STREQUAL "arm-none-eabi-gcc")
    CMAKE_FORCE_C_COMPILER("GNU" "arm-none-eabi-gcc")
    CMAKE_FORCE_CXX_COMPILER("GNU" "arm-none-eabi-g++")
endif()


SET( CMAKE_C_COMPILER   "${PROJECT_NONE_EABI_GCC_TOOLCHAIN_PATH}${PROJECT_COMPILER_ABI}gcc"       CACHE FILEPATH "" FORCE )
SET( CMAKE_CXX_COMPILER "${PROJECT_TOOLCHAIN_PATH}${PROJECT_COMPILER_ABI}g++"       CACHE FILEPATH "" FORCE )
SET( CMAKE_LINKER       "${PROJECT_TOOLCHAIN_PATH}${PROJECT_COMPILER_ABI}ld"        CACHE FILEPATH "" FORCE )
SET( CMAKE_AR           "${PROJECT_TOOLCHAIN_PATH}${PROJECT_COMPILER_ABI}ar"        CACHE FILEPATH "" FORCE )
SET( CMAKE_OBJCOPY      "${PROJECT_TOOLCHAIN_PATH}${PROJECT_COMPILER_ABI}objcopy"   CACHE FILEPATH "" FORCE )
SET( CMAKE_NM           "${PROJECT_TOOLCHAIN_PATH}${PROJECT_COMPILER_ABI}nm"        CACHE FILEPATH "" FORCE )
SET( CMAKE_OBJDUMP      "${PROJECT_TOOLCHAIN_PATH}${PROJECT_COMPILER_ABI}objdump"   CACHE FILEPATH "" FORCE )
SET( CMAKE_RANLIB       "${PROJECT_TOOLCHAIN_PATH}${PROJECT_COMPILER_ABI}ranlib"    CACHE FILEPATH "" FORCE )
SET( CMAKE_READELF      "${PROJECT_TOOLCHAIN_PATH}${PROJECT_COMPILER_ABI}readelf"   CACHE FILEPATH "" FORCE )
SET( CMAKE_ADDR2LINE    "${PROJECT_TOOLCHAIN_PATH}${PROJECT_COMPILER_ABI}addr2line" CACHE FILEPATH "" FORCE )
SET( CMAKE_STRIP        "${PROJECT_TOOLCHAIN_PATH}${PROJECT_COMPILER_ABI}strip"     CACHE FILEPATH "" FORCE )
SET( CMAKE_MAKE_PROGRAM "Unix Makefiles"                    CACHE FILEPATH "" FORCE )

SET (CMAKE_C_COMPILER_WORKS 1 CACHE INTERNAL "" FORCE)
SET (CMAKE_CXX_COMPILER_WORKS 1 CACHE INTERNAL "" FORCE)

# shearch for programs in the build host directories
SET( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER )

# for libraries and headers in the target directories
SET( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY )
SET( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY )
SET( CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY )

if ( PROJECT_ARCH_PROJECT_MODE STREQUAL "thumb" )
    SET( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mthumb-interwork -mthumb" )
    SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mthumb-interwork -mthumb" )
endif()

SET(COMMOM_FLAGS " -march=${PROJECT_ARCH_CPU} -mfpu=${PROJECT_ARCH_FPU} -mfloat-abi=${PROJECT_ARCH_FLOAT_ABI}")

    
# Sets assembler flags
SET( CMAKE_ASM_FLAGS "${COMMOM_FLAGS} -g3 -x assembler-with-cpp" CACHE STRING "" FORCE )
# Set C compiler Flags
SET( CMAKE_C_FLAGS "${COMMOM_FLAGS} -std=gnu11 -ffunction-sections -fdata-sections -Wall -fstack-usage" )
# Sets CPP compiler flags
SET( CMAKE_CXX_FLAGS "${COMMOM_FLAGS} -nostdlib -std=gnu++20 -g3 -O0 -ffunction-sections -fdata-sections -Wall -fstack-usage" )

SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-exceptions -fno-rtti -fno-threadsafe-statics -fno-use-cxa-atexit" )
# Sets Linker flags 
SET( CMAKE_EXE_LINKER_FLAGS "${COMMON_FLAGS} -Wl,--gc-sections -static -Wl,--start-group -lc -lm -lstdc++ -lsupc++ -Wl,--end-group")


if ( DEFINED PROJECT_USE_SEMIHOSTING )
    SET( CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} --specs=rdimon.specs")
endif()

if ( DEFINED PROJECT_USE_NOHOST )
    SET( CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} --specs=nosys.specs")
endif()

if ( DEFINED PROJECT_USE_NEWLIB )
    SET( CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} --specs=newlib.specs")
endif()

if ( DEFINED PROJECT_USE_NEWLIB_NANO )
    SET( CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} --specs=nano.specs")
endif()

SET( DEFINED CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -flto " )

# add the linker script files
foreach( LINKER_SCRIPT ${PROJECT_LINKER_SCRIPT_PATH} )
    SET( CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -T ${LINKER_SCRIPT}" )
endforeach()

# Set the linker file location
SET(CMAKE_LINKER_FLAGS "${CMAKE_LINKER_FLAGS} -Wl,-Map=${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}/${CMAKE_PROJECT_NAME}.map")

SET( CMAKE_CXX_FLAGS_DEBUG "-g")
SET( CMAKE_CXX_FLAGS_MINSIZEREL "Os -DNDEBUG")
SET( CMAKE_CXX_FLAGS_RELEASE "O3 -DNDEBUG")
SET( CMAKE_CXX_FLAGS_RELWITHDEBINFO "O2 -g -DNDEBUG")

# set extra linker flags
SET( CMAKE_LINKER_FLAGS "${CMAKE_LINKER_FLAGS} -flto " )
# Set the linker file location
SET( CMAKE_LINKER_FLAGS 
"${CMAKE_LINKER_FLAGS} -T ${PROJECT_LINKER_SCRIPT_PATH} -Wl,-Map=${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}/${CMAKE_PROJECT_NAME}.map")



# cache the flags for use
SET( CMAKE_C_FLAGS              "${CMAKE_C_FLAGS}"   CACHE STRING "CFLAGS" )
SET( CMAKE_CXX_FLAGS            "${CMAKE_CXX_FLAGS}" CACHE STRING "CXXFLAGS" )
SET( CMAKE_ASM_FLAGS            "${CMAKE_ASM_FLAGS}" CACHE STRING "ASMFLAGS" )
SET( CMAKE_EXE_LINKER_FLAGS     "${CMAKE_EXE_LINKER_FLAGS}" CACHE STRING "LINKERFLAGS" )
SET( CMAKE_STATIC_LINKER_FLAGS  "")
SET( CMAKE_SHARED_LINKER_FLAGS  "")


SET( CMAKE_EXPORT_COMPILE_COMMANDS             ON)
SET( CMAKE_C_USE_RESPONSE_FILE_FOR_INCLUDES    ON)
SET( CMAKE_C_USE_RESPONSE_FILE_FOR_LIBRARIES   ON)
SET( CMAKE_C_USE_RESPONSE_FILE_FOR_OBJECTS     ON)
SET( CMAKE_CXX_USE_RESPONSE_FILE_FOR_INCLUDES  ON)
SET( CMAKE_CXX_USE_RESPONSE_FILE_FOR_LIBRARIES ON)
SET( CMAKE_CXX_USE_RESPONSE_FILE_FOR_OBJECTS   ON)
SET( CMAKE_NINJA_FORCE_RESPONSE_FILE           ON)





